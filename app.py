import json
from time import time, sleep
from datetime import datetime
from random import randint
from sqlite3 import OperationalError
from threading import Thread

from utils.set_bot_commands import set_default_commands
from loader import users_db, variants_db


async def on_startup(dp):
    import filters
    # import middlewares
    filters.setup(dp)
    # middlewares.setup(dp)

    from utils.notify_admins import on_startup_notify

    try:
        users_db.create_table_users()
    except OperationalError:
        pass

    try:
        variants_db.create_variants_table()
    except OperationalError:
        pass

    await on_startup_notify(dp)
    await set_default_commands(dp)


async def on_shutdown(dp):
    from utils.notify_admins import on_shutdown_notify
    await on_shutdown_notify(dp)


async def watch_notifications(dp, delay=7):
    """–ö–∞–∂–¥—ã–µ delay –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—á–∞–ª–æ –∑–∞–Ω—è—Ç–∏—è –∏
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —á–∞—Å –¥–æ –∑–∞–Ω—è—Ç–∏–π"""
    notifications = (    # n - name, t - time
        'üîî {n}, –Ω–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤ {t} —É —Ç–µ–±—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ!',
        '{n}, —è —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å –≤—Å—ë... üßòüèΩ\n–ù–æ –º–æ—è –∑–∞–¥–∞—á–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –∑–∞–Ω—è—Ç–∏–∏ –≤ {t}!',
        'üìö {n}, –Ω–∞–¥–µ—é—Å—å, —Ç—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, –≤–µ–¥—å —Å–µ–≥–æ–¥–Ω—è –≤ {t} —É —Ç–µ–±—è –∑–∞–Ω—è—Ç–∏–µ!'
    )
    while True:
        today_number_of_the_week = datetime.today().weekday()   # 0 - monday, 6 - sunday
        generator = ((line[0], line[1], line[2]) for line in json.loads(users_db.select_all_users()))
        for user_id, name, timetable in generator:
            if timetable and today_number_of_the_week in timetable:
                _t = timetable[today_number_of_the_week]
                lesson_time = list(map(int, _t.replace(' ', '').split(':')))
                lesson_time_in_minutes = lesson_time[0] * 60 + lesson_time[1]
                today_time_in_minutes = datetime.now().hour * 60 + datetime.now().minute
                if 60 - delay < lesson_time_in_minutes - today_time_in_minutes <= 60:
                    first_name = name.split()[0]
                    await dp.bot.send_message(
                        user_id, notifications[randint(0, len(notifications)-1)].format(n=first_name, t=_t))

        sleep(420)


if __name__ == '__main__':
    from aiogram import executor
    from handlers import dp

    thread = Thread(target=watch_notifications, kwargs=dict(dp=dp))    # 1 –ø–æ—Ç–æ–∫ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π)
    thread.start()
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)    # 2 –ø–æ—Ç–æ–∫ (–æ—Å–Ω–æ–≤–Ω–æ–π)
# some comment
