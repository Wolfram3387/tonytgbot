import json
from aiogram import types
from aiogram.dispatcher.storage import FSMContext

from data.config import admins
from filters import IsPrivate, IsNotAdmin
from loader import dp, users_db, variants_db
from keyboards.default import u_theory, u_menu, u_variants_categories, u_cancel_1, a_edit_users_db, a_cancel_1, \
    a_edit_variants_db, a_menu


# ================================================================================================
# ============================================== USERS ===========================================
# ================================================================================================


@dp.message_handler(IsPrivate(), IsNotAdmin(), text='–ú–µ–Ω—é üìí', state='*')
async def show_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(message.text, reply_markup=u_menu)


@dp.message_handler(IsPrivate(), IsNotAdmin(), text='–¢–µ–æ—Ä–∏—è üîé')
async def show_theory(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª', reply_markup=u_theory)


@dp.message_handler(IsPrivate(), IsNotAdmin(), text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä')
async def send_statistic(message: types.Message):
    await message.answer('–ü–æ–∫–∞ —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')


@dp.message_handler(IsPrivate(), IsNotAdmin(), text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã üì©')
async def send_answers(message: types.Message, state: FSMContext):
    await state.set_state('choice_of_variant_category')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—Ä–∏–∞–Ω—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã',
                         reply_markup=u_variants_categories)


@dp.message_handler(IsPrivate(), IsNotAdmin(), text=[
    '–í–∞—Ä–∏–∞–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ï–ì–≠ üìï', '–í–∞—Ä–∏–∞–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –û–ì–≠ üìó', '–û–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç üìî', '–í–∞—Ä–∏–∞–Ω—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é üë®üèª‚Äçüíª',
    '–î—Ä—É–≥–æ–µ üìì'], state='choice_of_variant_category')
async def request_id_or_title(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ID –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã"""

    association = {'–í–∞—Ä–∏–∞–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ï–ì–≠ üìï': 'EGE', '–í–∞—Ä–∏–∞–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –û–ì–≠ üìó': 'OGE', '–û–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç üìî': 'TEST',
                   '–í–∞—Ä–∏–∞–Ω—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é üë®üèª‚Äçüíª': 'PROG', '–î—Ä—É–≥–æ–µ üìì': 'OTHER'}
    if message.text in ['–í–∞—Ä–∏–∞–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ï–ì–≠ üìï', '–í–∞—Ä–∏–∞–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –û–ì–≠ üìó', '–û–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç üìî']:
        await state.set_state('getting_variant_title')

        variants = '\n'.join([f'{line[0]} - {line[1]}' for line in sorted(
            variants_db.select_all_variants(), key=lambda line: int(line[0])) if line[3] == association[message.text]])
        await message.answer(f'–í–æ—Ç –≤—Å–µ ID –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è:\n{variants}')
        await message.answer(
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ID –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç—ã', reply_markup=u_cancel_1)

    elif message.text == '–í–∞—Ä–∏–∞–Ω—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é üë®üèª‚Äçüíª':
        await state.set_state('input_of_files_with_programs')
        await message.answer(
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ (–∏–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä—É –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤'
            ' –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∏–µ –Ω–æ–º–µ—Ä/–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏)', reply_markup=u_cancel_1
        )

    elif message.text == '–î—Ä—É–≥–æ–µ üìì':
        pass


# =================================================================================================
# ============================================== ADMINS ===========================================
# =================================================================================================


@dp.message_handler(IsPrivate(), text=['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö',
                                       '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö'], user_id=admins)
async def edit_selection(message: types.Message, state: FSMContext):
    text = message.text
    if text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö':
        await state.set_state('entering_id_to_editing_UsersInfo')
        await message.answer(
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=a_cancel_1)
    elif text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö':
        await state.set_state('entering_title_to_editing_VariantsInfo')
        await message.answer(
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ id –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=a_cancel_1)


@dp.message_handler(IsPrivate(), content_types=['text'], user_id=admins, state=[
    'entering_id_to_editing_UsersInfo', 'entering_title_to_editing_VariantsInfo'])
async def check_variant_or_user_id(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –∏—Ö –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î"""
    if message.text in '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer('–ú–µ–Ω—é üìí', reply_markup=a_menu)
        return

    state_name = await state.get_state()
    if state_name == 'entering_id_to_editing_UsersInfo':
        try:
            line = users_db.select_user(user_id=int(message.text))
            tt = json.loads(line[2])    # tt - timetable
            student_name = line[1]
            msg = (
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {student_name}',
                f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:',
                '+=============+===========+',
                '|{0:^15}|{1:^13}|'.format("–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", tt["0"] if "0" in tt else "–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏—è").replace(' ', '_'),
                '|{0:^15}|{1:^13}|'.format("–≤—Ç–æ—Ä–Ω–∏–∫", tt["1"] if "1" in tt else "–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏—è").replace(' ', '_'),
                '|{0:^15}|{1:^13}|'.format("—Å—Ä–µ–¥–∞", tt["2"] if "2" in tt else "–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏—è").replace(' ', '_'),
                '|{0:^16}|{1:^13}|'.format(" —á–µ—Ç–≤–µ—Ä–≥ ", tt["3"] if "3" in tt else "–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏—è").replace(' ', '_'),
                '|{0:^15}|{1:^13}|'.format("–ø—è—Ç–Ω–∏—Ü–∞", tt["4"] if "4" in tt else "–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏—è").replace(' ', '_'),
                '|{0:^15}|{1:^13}|'.format("—Å—É–±–±–æ—Ç–∞", tt["5"] if "5" in tt else "–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏—è").replace(' ', '_'),
                '|{0:^15}|{1:^13}|'.format("–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", tt["6"] if "6" in tt else "–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏—è").replace(' ', '_'),
                '+=============+===========+',
                f'–ì–æ—Ç–æ–≤–∏—Ç—Å—è –∫: {line[3]}',
                f'–°—Ç–∞—Ç—É—Å: {line[4] if line[4] else "–ë–∞–∑–æ–≤—ã–π"}',
                '–ß—Ç–æ –í—ã –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?'
            )
            await state.update_data(student_id=int(message.text), student_name=student_name)
            await state.set_state('selection_for_editing_in_the_UsersInfo')
            await message.answer("\n".join(msg), reply_markup=a_edit_users_db)
        except TypeError:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        except ValueError:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω id, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    elif state_name == 'entering_title_to_editing_VariantsInfo':
        if message.text.isdigit():
            line = variants_db.select_variant(variant_id=int(message.text))
        else:
            line = variants_db.select_variant(title=message.text)
        if not line:
            await message.answer(f'–í–∞—Ä–∏–∞–Ω—Ç "{message.text}" –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            return
        answers = '\n'.join(f'{number}) {answer}' for number, answer in json.loads(line[2]).items())
        additional = '\n'.join(f'{name} ‚Äî {value}' for name, value in json.loads(line[6]).items())
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await state.update_data(variant_line=line)
        await message.answer(
            f'–ù–∞–∑–≤–∞–Ω–∏–µ: {line[1]}\n–û—Ç–≤–µ—Ç—ã:\n{answers}\n–¢–∏–ø: {line[3]}\n–°—Ç–∞—Ç—É—Å: {line[4]}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {line[5]}\n'
            f'–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n{additional}\n\n–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —ç—Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ?', reply_markup=a_edit_variants_db)
