import json
from aiogram import types
from aiogram.dispatcher import FSMContext

from filters import IsPrivate, IsNotAdmin
from keyboards.default import u_menu, u_cancel_1, u_finish_entering, u_variants_categories, u_cancel_2
from loader import dp, users_db, variants_db
from ._points_transfer import EGE_TRANSFER, EGE_POINTS_FOR_NUMBERS, OGE_TRANSFER, OGE_POINTS_FOR_NUMBERS, \
    MAX_PRIMARY_POINTS_FOR_OGE


@dp.message_handler(IsNotAdmin(), IsPrivate(), content_types=['photo', 'document', 'text'], state=[
    'input_of_files_with_programs', 'input_of_other_files', 'entering_documents'
])
async def get_photo(message: types.Message, state: FSMContext):
    content_type = message.content_type
    user_data = await state.get_data()

    if content_type == 'photo':
        if message.photo[-1].file_size > 20971520:  # 20971520 = 20 * 1024 * 1024 = 20 * 2^20 - –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–∞–π—Ç—ã
            await message.reply('–§–æ—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 –ú–±')
            return
        photo_id = message.photo[-1].file_id
        if 'photo_ids' not in user_data:
            new_photo_ids = [photo_id]
            await state.update_data(photo_ids=new_photo_ids)
            # await state.set_state('repeat_oge_files_input')
        else:
            new_photo_ids = user_data['photo_ids']
            new_photo_ids.append(photo_id)
            await state.update_data(photo_ids=new_photo_ids)

        await message.reply('–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', reply_markup=u_finish_entering)

    elif content_type == 'document':
        if message.document.file_size > 20971520:
            await message.reply('–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 –ú–±')
            return
        file_id = message.document.file_id

        if 'file_ids' not in user_data:
            new_file_ids = [file_id]
            await state.update_data(file_ids=new_file_ids)
        else:
            new_file_ids = user_data['file_ids']
            new_file_ids.append(file_id)
            await state.update_data(file_ids=new_file_ids)

        await message.reply('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω', reply_markup=u_finish_entering)

    elif content_type == 'text':
        text = message.text

        if text == '–û—Ç–º–µ–Ω–∏—Ç—å':
            await state.set_state('choice_of_variant_category')
            await message.answer(text, reply_markup=u_variants_categories)

        elif text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥':
            user_id = message.from_user.id
            await state.finish()
            await message.answer('–í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!', reply_markup=u_menu)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ requests –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∂–¥—ë–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞
            requests = json.loads(users_db.select_user(user_id=user_id)[9])
            try:
                i = max((int(key.split('_')[1]) if key.startswith('prog_') else 0 for key in requests))
            except ValueError:
                i = 0
            requests[f'prog_{i+1}'] = {
                "photo_ids": user_data['photo_ids'] if 'photo_ids' in user_data else dict(),
                "file_ids": user_data['file_ids'] if 'file_ids' in user_data else dict(),
            }
            users_db.update_data(user_id=user_id, change=('requests', json.dumps(requests)))


@dp.message_handler(IsNotAdmin(), IsPrivate(), content_types=['text'], state=[
    'entering_all_ege_answers', 'entering_test_oge_answers', 'entering_short_answers'
])
async def send_statistic(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        await message.answer('–ú–µ–Ω—é üìí', reply_markup=u_menu)
        return

    answers = dict()  # number: answer (str: str)
    try:
        for line in message.text.split('\n'):
            line = line.strip()
            if ') ' in line:
                number, answer = line.split(') ')
                answers[number] = answer
            elif ': ' in line:
                number, answer = line.split(': ')
                answers[number] = answer
            else:
                number, answer = line.split()
                answers[number] = answer
    except ValueError:    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–æ–≤
        await message.answer(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=u_cancel_1)
        return
    state_name = await state.get_state()

    results = list()  # Example results = [(1, 123, True), (2, abcd, False)]
    # results[0] - –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, results[1] - –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞, results[2] - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–µ—Ç
    user_data = await state.get_data()
    variant_title, variant_id = user_data['variant_title'], user_data['variant_id']
    variant_info = variants_db.select_variant(variant_id=variant_id, title=variant_title)
    correct_answers = json.loads(variant_info[2])
    for number, correct_answer in correct_answers.items():
        if number in answers:
            results.append((number, answers[number], correct_answer == answers[number].lower().strip()))
        else:
            results.append((number, '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞', False))

    if state_name == 'entering_all_ege_answers':
        # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª-–≤–∞ –±–∞–ª–ª–æ–≤, —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –≤—ã–≤–æ–¥
        primary_points = tasks_solved = 0
        for _number, _answer, _result in results:
            if _result:
                tasks_solved += 1
                primary_points += EGE_POINTS_FOR_NUMBERS[_number]

        await state.update_data(variant_title=variant_title, variant_id=variant_id, tasks_solved=tasks_solved,
                                results=results, correct_answers=correct_answers, primary_points=primary_points)

        await state.set_state('other_files_to_check')
        await message.answer(
            '–û—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, —Ç–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏',
            reply_markup=u_cancel_2
        )

    elif state_name == 'entering_test_oge_answers':
        # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª-–≤–∞ –±–∞–ª–ª–æ–≤, —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –≤—ã–≤–æ–¥
        primary_points = tasks_solved = 0
        for _number, _answer, _result in results:
            if _result:
                tasks_solved += 1
                primary_points += OGE_POINTS_FOR_NUMBERS[_number]
        await state.update_data(variant_title=variant_title, tasks_solved=tasks_solved, results=results,
                                correct_answers=correct_answers, primary_points=primary_points)
        await state.set_state('oge_files_input')
        await message.answer(
            '–û—Ç–≤–µ—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã, —Ç–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ñ–∞–π–ª—ã —Å –∑–∞–¥–∞—á–∞–º–∏ 13-15 –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏',
            reply_markup=u_cancel_2)

    elif state_name == 'entering_short_answers':
        await message.answer(
            '\n'.join(f'{_number}) {_answer} - {"‚úÖ" if _result else "‚ùå"}' for _number, _answer, _result in results)
        )
        # TODO –≤–≤–æ–¥ –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤

    # await state.update_data(answers)


@dp.message_handler(IsNotAdmin(), IsPrivate(), content_types=['text'], state='getting_variant_title')
async def send_statistic(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        await state.finish()
        await message.answer(message.text, reply_markup=u_menu)
        return

    variant_title, variant_id = (None, int(message.text)) if message.text.isdigit() else (message.text.lower(), None)

    for variant_info in variants_db.select_all_variants():
        if variant_info[1].lower() == variant_title or variant_info[0] == variant_id:
            await state.update_data(variant_title=variant_title, variant_id=variant_id)

            # –ï—Å–ª–∏ —ç—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç –ï–ì–≠: –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –≤–≤–æ–¥ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤, –ø–æ—Ç–æ–º –Ω–∞ –≤–≤–æ–¥ –¥–æ–ø. —Ñ–∞–π–ª–æ–≤
            if variant_info[3] == 'EGE':
                await state.set_state('entering_all_ege_answers')
                await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n1) 123\n2) wzyx\n. . .', reply_markup=u_cancel_1)

            # –ï—Å–ª–∏ —ç—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç –û–ì–≠: –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –≤–≤–æ–¥ –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, –ø–æ—Ç–æ–º –Ω–∞ –≤–≤–æ–¥ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–¥–∞—á 13, 14, 15
            elif variant_info[3] == 'OGE':
                await state.set_state('entering_test_oge_answers')
                await message.answer(
                    '–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∑–∞–¥–∞—á 1-12 –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n1) 123\n2) abc\n. . .', reply_markup=u_cancel_1)

            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç, —Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –≤–≤–æ–¥ –∫—Ä–∞—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
            elif variant_info[3] == 'TEST':
                await state.set_state('entering_short_answers')
                await message.answer(
                    '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n1) 123\n2) abc\n. . .\n\n–ò–õ–ò\n\n1: 123\n2: abc\n. . .',
                    reply_markup=u_cancel_1
                )

            # –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–æ–µ, —Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –≤–≤–æ–¥ —Ñ–∞–π–ª–æ–≤
            elif variant_info[3] == 'OTHER':
                await state.set_state('input_of_other_files')
                await message.answer(
                    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª—ã —Å —Ä–µ—à–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ (–∏–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä—É'
                    ' –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤ —Å–∞–º–æ–º —Ñ–∞–π–ª–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–æ–∑–Ω–∞—á–µ–Ω –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏)',
                    reply_markup=u_cancel_1
                )
            break
    else:
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞—à—ë–ª—Å—è –≤ –ë–î:
        await message.answer(
            '–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
            reply_markup=u_cancel_1
        )


@dp.message_handler(IsNotAdmin(), IsPrivate(), content_types=['document', 'photo', 'text'], state=[
    'other_files_to_check', 'repeat_other_files_to_check'
])
async def send_statistic(message: types.Message, state: FSMContext):
    content_type = message.content_type
    name = message.from_user.full_name.title()
    text = message.text
    user_data = await state.get_data()
    variant_title = user_data['variant_title']
    variant_id = user_data['variant_id']

    if not variant_id or not variant_title:
        line = variants_db.select_variant(variant_id=variant_id, title=variant_title)
        variant_id = line[0]
        variant_title = line[1]

    if text in ('–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):
        tasks_solved = user_data['tasks_solved']
        correct_answers = user_data['correct_answers']
        results = user_data['results']
        primary_points = user_data['primary_points']
        max_primary_points = sum(EGE_POINTS_FOR_NUMBERS.values())
        secondary_points = EGE_TRANSFER[primary_points]

        await state.finish()
        await message.answer(
            '–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n' +
            '\n'.join(f'{_number}) {_answer} - {"‚úÖ" if _result else "‚ùå"}' for _number, _answer, _result in results))

        await message.answer(
                f'–í—ã —Ä–µ—à–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ {tasks_solved} –∏–∑ {len(correct_answers)} –∑–∞–¥–∞—á!\n\n'
                f'–ù–∞–±—Ä–∞–Ω–æ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –±–∞–ª–ª–æ–≤: {primary_points} –∏–∑ {max_primary_points},'
                f' —á—Ç–æ —Ä–∞–≤–Ω–æ {round(primary_points/max_primary_points*100, 1)}%\n\n'
                f'–ù–∞ —Ä–µ–∞–ª—å–Ω–æ–º —ç–∫–∑–∞–º–µ–Ω–µ –í—ã –±—ã –Ω–∞–±—Ä–∞–ª–∏ {secondary_points} –∏–∑ 100 –±–∞–ª–ª–æ–≤!', reply_markup=u_menu)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –≤ requests –∫–∞–∫ ege_{variant_id}
        user_line = users_db.select_user(user_id=message.from_user.id)
        requests = json.loads(user_line[9])
        requests[f'ege_{variant_id}'] = {
            "photo_ids": user_data['photo_ids'] if 'photo_ids' in user_data else dict(),
            "file_ids": user_data['file_ids'] if 'file_ids' in user_data else dict(),
            "tasks_solved": user_data['tasks_solved'],
            "correct_answers": user_data['correct_answers'],
            "results": user_data['results'],
            "primary_points": user_data['primary_points']
        }
        users_db.update_data(user_id=message.from_user.id, change=('requests', json.dumps(requests)))
        return

    elif text in ('–û—Ç–º–µ–Ω–∏—Ç—å', '–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥'):
        await state.finish()
        await message.answer(text, reply_markup=u_menu)
        return

    state_name = await state.get_state()
    line = variants_db.select_variant(title=variant_title, variant_id=variant_id)

    if content_type == 'photo':
        if message.photo[-1].file_size > 20971520:  # 20971520 = 20 * 1024 * 1024 = 20 * 2^20 - –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–∞–π—Ç—ã
            await message.reply('–§–æ—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 –ú–±')
            return
        photo_id = message.photo[-1].file_id

        if state_name == 'other_files_to_check':
            await state.set_state('repeat_other_files_to_check')
            await state.update_data(photo_ids=[photo_id])
        elif state_name == 'repeat_other_files_to_check':
            user_data['photo_ids'].append(photo_id)
            await state.update_data(photo_ids=user_data['photo_ids'])

        await message.reply('–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', reply_markup=u_finish_entering)

    elif content_type == 'document':
        if message.document.file_size > 20971520:
            await message.reply('–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 –ú–±')
            return
        file_id = message.document.file_id

        if state_name == 'other_files_to_check':
            await state.set_state('repeat_other_files_to_check')
            await state.update_data(file_ids=[file_id])
        elif state_name == 'repeat_other_files_to_check':
            user_data['file_ids'].append(file_id)
            await state.update_data(photo_ids=user_data['file_ids'])

        await message.reply('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω', reply_markup=u_finish_entering)
    if state_name == 'other_files_to_check':
        await state.set_state('repeat_other_files_to_check')


@dp.message_handler(IsNotAdmin(), IsPrivate(), content_types=['document', 'photo', 'text'], state=[
    'oge_files_input', 'repeat_oge_files_input'
])
async def send_statistic(message: types.Message, state: FSMContext):
    content_type = message.content_type
    name = message.from_user.full_name.title()
    text = message.text
    user_data = await state.get_data()
    user_id = message.from_user.id
    line = users_db.select_user(user_id=user_id)
    variant_id = user_data['variant_id']
    if not variant_id:
        variant_id = line[0]

    if text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥':    # –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–¥–∞—á–∏ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
        await state.finish()
        await message.answer('–í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!', reply_markup=u_menu)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ requests –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É –∏ –∂–¥—ë–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞
        requests = json.loads(line[9])
        requests[f'oge_{variant_id}'] = {
            "photo_ids": user_data['photo_ids'] if 'photo_ids' in user_data else dict(),
            "file_ids": user_data['file_ids'] if 'file_ids' in user_data else dict(),
            "tasks_solved": user_data['tasks_solved'],
            "correct_answers": user_data['correct_answers'],
            "results": user_data['results'],
            "primary_points": user_data['primary_points']
        }
        users_db.update_data(user_id=user_id, change=('requests', json.dumps(requests)))
        return

    elif text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':    # –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ –ù–ï –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–¥–∞—á–∏ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
        tasks_solved = user_data['tasks_solved']
        correct_answers = user_data['correct_answers']
        results = user_data['results']
        primary_points = user_data['primary_points']
        max_primary_points = MAX_PRIMARY_POINTS_FOR_OGE
        secondary_points = OGE_TRANSFER[primary_points]

        await state.finish()
        await message.answer(
            '–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n' +
            '\n'.join(f'{_number}) {_answer} - {"‚úÖ" if _result else "‚ùå"}' for _number, _answer, _result in results))

        await message.answer(
            f'–í—ã —Ä–µ—à–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ {tasks_solved} –∏–∑ {len(correct_answers) + 3} –∑–∞–¥–∞—á!\n\n'
            f'–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: {primary_points} –∏–∑ {max_primary_points},'
            f' —á—Ç–æ —Ä–∞–≤–Ω–æ {round(primary_points / max_primary_points * 100, 1)}%\n\n'
            f'–ù–∞ —Ä–µ–∞–ª—å–Ω–æ–º —ç–∫–∑–∞–º–µ–Ω–µ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±—ã –æ—Ü–µ–Ω–∫—É: {secondary_points}', reply_markup=u_menu)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–∞–∫ oge_{variant_id}
        requests = json.loads(line[9])
        requests[f'oge_{variant_id}'] = {
            "tasks_solved": user_data['tasks_solved'],
            "correct_answers": user_data['correct_answers'],
            "results": user_data['results'],
            "primary_points": user_data['primary_points']
        }
        users_db.update_data(user_id=user_id, change=('requests', json.dumps(requests)))
        return

    elif text in ('–û—Ç–º–µ–Ω–∏—Ç—å', '–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥'):
        await state.finish()
        await message.answer(text, reply_markup=u_menu)
        return

    state_name = await state.get_state()

    if content_type == 'photo':
        if message.photo[-1].file_size > 20971520:  # 20971520 = 20 * 1024 * 1024
            await message.reply('–§–æ—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 –ú–±')
            return
        photo_id = message.photo[-1].file_id
        if 'photo_ids' not in user_data:
            new_photo_ids = [photo_id]
            await state.update_data(photo_ids=new_photo_ids)
            # await state.set_state('repeat_oge_files_input')
        else:
            new_photo_ids = user_data['photo_ids']
            new_photo_ids.append(photo_id)
            await state.update_data(photo_ids=new_photo_ids)

        await message.reply('–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', reply_markup=u_finish_entering)

    elif content_type == 'document':
        if message.document.file_size > 20971520:
            await message.reply('–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 –ú–±')
            return
        file_id = message.document.file_id

        if 'file_ids' not in user_data:
            new_file_ids = [file_id]
            await state.update_data(file_ids=new_file_ids)
            # await state.set_state('repeat_oge_files_input')
        else:
            new_file_ids = user_data['file_ids']
            new_file_ids.append(file_id)
            await state.update_data(file_ids=new_file_ids)

        await message.reply('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω', reply_markup=u_finish_entering)
