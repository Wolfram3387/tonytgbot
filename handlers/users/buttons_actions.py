import json

from aiogram.types import ContentType
from data.config import admins
from handlers.users._points_transfer import MAX_PRIMARY_POINTS_FOR_OGE, OGE_TRANSFER, EGE_POINTS_FOR_NUMBERS, \
    EGE_TRANSFER
from loader import dp, users_db, variants_db, bot
from aiogram import types
from filters import IsPrivate, IsNotAdmin
from aiogram.dispatcher.storage import FSMContext

from keyboards.default import u_theory, u_menu, u_variants_categories, u_cancel_1, a_edit_users_db, a_cancel_1, \
    a_edit_variants_db, a_menu, a_edit_timetable_or_achievements, a_check_oge, a_check_continue, a_yes_or_not, \
    a_what_to_check, a_finish_newsletter, a_delete_or_change


# TODO –∏–∑–º–µ–Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π

# ================================================================================================
# ============================================== USERS ===========================================
# ================================================================================================


@dp.message_handler(IsPrivate(), IsNotAdmin(), text='–ú–µ–Ω—é üìí', state='*')
async def show_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(message.text, reply_markup=u_menu)


@dp.message_handler(IsPrivate(), IsNotAdmin(), text='–¢–µ–æ—Ä–∏—è üîé')
async def show_theory(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª', reply_markup=u_theory)


@dp.message_handler(IsPrivate(), IsNotAdmin(), text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä')
async def send_statistic(message: types.Message):
    await message.answer('–ü–æ–∫–∞ —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')


@dp.message_handler(IsPrivate(), IsNotAdmin(), text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã üì©')
async def send_statistic(message: types.Message, state: FSMContext):
    await state.set_state('choice_of_variant_category')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—Ä–∏–∞–Ω—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã',
                         reply_markup=u_variants_categories)


@dp.message_handler(IsPrivate(), IsNotAdmin(), text=[
    '–í–∞—Ä–∏–∞–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ï–ì–≠ üìï', '–í–∞—Ä–∏–∞–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –û–ì–≠ üìó', '–û–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç üìî', '–í–∞—Ä–∏–∞–Ω—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é üë®üèª‚Äçüíª',
    '–î—Ä—É–≥–æ–µ üìì'
], state='choice_of_variant_category')
async def send_statistic(message: types.Message, state: FSMContext):
    text = message.text
    if text in ['–í–∞—Ä–∏–∞–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ï–ì–≠ üìï', '–í–∞—Ä–∏–∞–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –û–ì–≠ üìó', '–û–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç üìî']:
        await state.set_state('getting_variant_title')
        # TODO –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã EGE/OGE/TEST... –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –≤ message.text
        await message.answer(
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ID –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç—ã', reply_markup=u_cancel_1)

    elif text == '–í–∞—Ä–∏–∞–Ω—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é üë®üèª‚Äçüíª':
        await state.set_state('input_of_files_with_programs')
        await message.answer(
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ (–∏–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä—É –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤'
            ' –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∏–µ –Ω–æ–º–µ—Ä/–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏)', reply_markup=u_cancel_1
        )

    elif text == '–î—Ä—É–≥–æ–µ üìì':
        # TODO –î–æ–¥–µ–ª–∞—Ç—å
        pass


# =================================================================================================
# ============================================== ADMINS ===========================================
# =================================================================================================


@dp.message_handler(IsPrivate(), text=['–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üì£'], user_id=admins)
async def spam(message: types.Message, state: FSMContext):
    await state.set_state('spam')
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª—ã)', reply_markup=a_cancel_1)


@dp.message_handler(IsPrivate(), text=['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö',
                                       '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö'], user_id=admins)
async def edit_selection(message: types.Message, state: FSMContext):
    text = message.text
    if text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö':
        await state.set_state('entering_id_to_editing_UsersInfo')
        await message.answer(
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=a_cancel_1)
    elif text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö':
        await state.set_state('entering_title_to_editing_VariantsInfo')
        await message.answer(
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ id –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=a_cancel_1)


@dp.message_handler(IsPrivate(), content_types=['text'], user_id=admins, state=[
    'entering_id_to_editing_UsersInfo', 'entering_title_to_editing_VariantsInfo'
])
async def edit_selection(message: types.Message, state: FSMContext):
    if message.text in '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer('–ú–µ–Ω—é üìí', reply_markup=a_menu)
        return

    state_name = await state.get_state()
    if state_name == 'entering_id_to_editing_UsersInfo':
        try:
            line = users_db.select_user(user_id=int(message.text))
            tt = json.loads(line[2])    # tt - timetable
            student_name = line[1]
            msg = (
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {student_name}',
                f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:',
                '+=============+===========+',
                '|{0:^15}|{1:^13}|'.format("–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", tt["0"] if "0" in tt else "–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏—è").replace(' ', '_'),
                '|{0:^15}|{1:^13}|'.format("–≤—Ç–æ—Ä–Ω–∏–∫", tt["1"] if "1" in tt else "–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏—è").replace(' ', '_'),
                '|{0:^15}|{1:^13}|'.format("—Å—Ä–µ–¥–∞", tt["2"] if "2" in tt else "–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏—è").replace(' ', '_'),
                '|{0:^16}|{1:^13}|'.format(" —á–µ—Ç–≤–µ—Ä–≥ ", tt["3"] if "3" in tt else "–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏—è").replace(' ', '_'),
                '|{0:^15}|{1:^13}|'.format("–ø—è—Ç–Ω–∏—Ü–∞", tt["4"] if "4" in tt else "–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏—è").replace(' ', '_'),
                '|{0:^15}|{1:^13}|'.format("—Å—É–±–±–æ—Ç–∞", tt["5"] if "5" in tt else "–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏—è").replace(' ', '_'),
                '|{0:^15}|{1:^13}|'.format("–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", tt["6"] if "6" in tt else "–Ω–µ—Ç –∑–∞–Ω—è—Ç–∏—è").replace(' ', '_'),
                '+=============+===========+',
                f'–ì–æ—Ç–æ–≤–∏—Ç—Å—è –∫: {line[3]}',
                f'–°—Ç–∞—Ç—É—Å: {line[4] if line[4] else "–ë–∞–∑–æ–≤—ã–π"}',
                '–ß—Ç–æ –í—ã –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?'
            )
            await state.update_data(student_id=int(message.text), student_name=student_name)
            await state.set_state('selection_for_editing_in_the_UsersInfo')
            await message.answer("\n".join(msg), reply_markup=a_edit_users_db)
        except TypeError:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        except ValueError:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω id, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    elif state_name == 'entering_title_to_editing_VariantsInfo':
        if message.text.isdigit():
            line = variants_db.select_variant(variant_id=int(message.text))
        else:
            line = variants_db.select_variant(title=message.text)
        if not line:
            await message.answer(f'–í–∞—Ä–∏–∞–Ω—Ç "{message.text}" –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            return
        answers = '\n'.join(f'{number}) {answer}' for number, answer in json.loads(line[2]).items())
        additional = '\n'.join(f'{name} ‚Äî {value}' for name, value in json.loads(line[6]).items())
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await state.update_data(variant_line=line)
        await message.answer(
            f'–ù–∞–∑–≤–∞–Ω–∏–µ: {line[1]}\n–û—Ç–≤–µ—Ç—ã:\n{answers}\n–¢–∏–ø: {line[3]}\n–°—Ç–∞—Ç—É—Å: {line[4]}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {line[5]}\n'
            f'–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n{additional}\n\n–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —ç—Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ?', reply_markup=a_edit_variants_db)


@dp.message_handler(IsPrivate(), user_id=admins, state='selection_for_editing_in_the_UsersInfo', text=[
    '–ò–º—è', '–í–∞–ª—é—Ç–∞ 1', '–í–∞–ª—é—Ç–∞ 2', '–ö —á–µ–º—É –≥–æ—Ç–æ–≤–∏—Ç—Å—è', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ú–µ–Ω—é üìí'
])
async def correction_db(message: types.Message, state: FSMContext):
    text = message.text
    if text == '–ú–µ–Ω—é üìí':
        await state.finish()
        await message.answer('–ú–µ–Ω—é üìí', reply_markup=a_menu)
        return

    if text == '–ò–º—è':
        await state.set_state('editing_name')
        await message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ–≥–æ –Ω–æ–≤–æ–µ –∏–º—è', reply_markup=a_cancel_1)

    elif text == '–ö —á–µ–º—É –≥–æ—Ç–æ–≤–∏—Ç—Å—è':
        await state.set_state('editing_preparing_for')
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫ —á–µ–º—É –æ–Ω —Ç–µ–ø–µ—Ä—å –≥–æ—Ç–æ–≤–∏—Ç—Å—è:\n\nEGE –∏–ª–∏ OGE', reply_markup=a_cancel_1)

    elif text == '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è':
        data = await state.get_data()
        line = users_db.select_user(user_id=data['student_id'])
        achievements = json.loads(line[5])
        msg = [f'–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —É—á–µ–Ω–∏–∫–∞ {data["student_name"]}:']
        for achievement, count in achievements.items():
            msg.append(f'    {achievement}: {count}')
        if not achievements:
            msg.append('~ ~ ~ –ü—É—Å—Ç–æ ~ ~ ~')
        msg.append('\n–ö–∞–∫ –∏–º–µ–Ω–Ω–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö?')

        await state.set_state('add_or_delete_achievements')
        await message.answer('\n'.join(msg), reply_markup=a_edit_timetable_or_achievements)

    elif text == '–í–∞–ª—é—Ç–∞ 1':
        # await state.set_state('editing_curr_1')
        # TODO –¥–æ–¥–µ–ª–∞—Ç—å
        await message.answer('–ü–æ–∫–∞ —ç—Ç–∞ —Ñ–∏—à–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è')

    elif text == '–í–∞–ª—é—Ç–∞ 2':
        # await state.set_state('editing_curr_2')
        # TODO –¥–æ–¥–µ–ª–∞—Ç—å
        await message.answer('–ü–æ–∫–∞ —ç—Ç–∞ —Ñ–∏—à–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è')

    elif text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        await state.set_state('what_to_change_in_the_timetable')
        await message.answer('–£–¥–∞–ª–∏—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å?',
                             reply_markup=a_edit_timetable_or_achievements)

    elif text == '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
        await state.set_state('delete_user_yes_or_not')
        data = await state.get_data()
        await message.answer(f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {data["student_name"]}?',
                             reply_markup=a_yes_or_not)


@dp.message_handler(IsPrivate(), user_id=admins, text=[
    '–£–¥–∞–ª–∏—Ç—å', '–î–æ–±–∞–≤–∏—Ç—å', '–û—Ç–º–µ–Ω–∞'], state='add_or_delete_achievements')
async def blablabla(message: types.Message, state: FSMContext):
    text = message.text
    if text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state('selection_for_editing_in_the_UsersInfo')
        await message.answer(text, reply_markup=a_edit_users_db)
        return

    data = await state.get_data()
    name = data['student_name']
    if text == '–î–æ–±–∞–≤–∏—Ç—å':
        await state.set_state('add_achievement')
        await message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {name}',
                             reply_markup=a_cancel_1)

    elif text == '–£–¥–∞–ª–∏—Ç—å':
        await state.set_state('delete_achievement')
        await message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                             f' {name}\n(—ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É–±–µ—Ä—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑)', reply_markup=a_cancel_1)


@dp.message_handler(IsPrivate(), user_id=admins, content_types='text', state=[
    'add_achievement', 'delete_achievement'])
async def blablabla(message: types.Message, state: FSMContext):
    text = message.text
    if text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state('selection_for_editing_in_the_UsersInfo')
        await message.answer(text, reply_markup=a_edit_users_db)
        return

    state_name = await state.get_state()
    data = await state.get_data()
    line = users_db.select_user(user_id=data['student_id'])
    achievements = json.loads(line[5])
    name = data['student_name']

    if state_name == 'add_achievement':
        if text in achievements:
            achievements[text] += 1
        else:
            achievements[text] = 1
        users_db.update_data(user_id=data['student_id'], change=('achievements', json.dumps(achievements)))

        await state.set_state('selection_for_editing_in_the_UsersInfo')
        await message.answer(f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {text} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {name}\n(—Ç–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ –∏—Ö'
                             f' {achievements[text]})', reply_markup=a_edit_users_db)

    elif state_name == 'delete_achievement':
        try:
            achievements[text] -= 1
            await state.set_state('selection_for_editing_in_the_UsersInfo')
            await message.answer(f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}\n(—Ç–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ –∏—Ö '
                                 f'{achievements[text]})', reply_markup=a_edit_users_db)
            if achievements[text] == 0:
                del achievements[text]
            users_db.update_data(user_id=data['student_id'], change=('achievements', json.dumps(achievements)))
        except KeyError:
            await message.answer(f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è {text} –Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')


@dp.message_handler(IsPrivate(), user_id=admins, text=['–î–∞', '–ù–µ—Ç'], state='delete_user_yes_or_not')
async def blablabla(message: types.Message, state: FSMContext):
    if message.text == '–î–∞':
        data = await state.get_data()
        users_db.delete_user(user_id=data['student_id'])
        await state.finish()
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {data["student_name"]} —É–¥–∞–ª—ë–Ω', reply_markup=a_menu)
    elif message.text == '–ù–µ—Ç':
        await state.set_state('selection_for_editing_in_the_UsersInfo')
        await message.answer('–•–æ—Ä–æ—à–æ, –Ω–µ —É–¥–∞–ª—è—é', reply_markup=a_edit_users_db)


@dp.message_handler(IsPrivate(), user_id=admins, text=[
    '–£–¥–∞–ª–∏—Ç—å', '–î–æ–±–∞–≤–∏—Ç—å', '–û—Ç–º–µ–Ω–∞'], state='what_to_change_in_the_timetable')
async def blablabla(message: types.Message, state: FSMContext):
    text = message.text

    if text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state('selection_for_editing_in_the_UsersInfo')
        await message.answer('–û—Ç–º–µ–Ω–∞', reply_markup=a_edit_users_db)
        return

    if text == '–£–¥–∞–ª–∏—Ç—å':
        await state.set_state('deleting_in_timetable')
        await message.answer(
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–µ–Ω—å/–¥–Ω–∏, –∫–æ—Ç–æ—Ä—ã–π(-—ã–µ) –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥–∞, ...\n\n–ò–õ–ò\n\n–ø–Ω, —Å—Ä, —Å–±, ...\n\n–õ–∏–±–æ –≤—Å—ë –ø—Ä–æ—Å—Ç–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –ª–∏–±–æ —á–µ—Ä–µ–∑ '
            '–∑–∞–ø—è—Ç—É—é —Å –ø—Ä–æ–±–µ–ª–æ–º', reply_markup=a_cancel_1)

    elif text == '–î–æ–±–∞–≤–∏—Ç—å':
        await state.set_state('adding_in_timetable')
        await message.answer(
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–µ–Ω—å/–¥–Ω–∏, –∫–æ—Ç–æ—Ä—ã–π(-—ã–µ) –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00, —Å—Ä–µ–¥–∞ 18:45, ...\n\n–ò–õ–ò\n\n–ø–Ω 10:00, —Å—Ä 19:10, —Å–± 20:50, ...\n\n–°—Ç—Ä–æ–≥–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
            ' —Å –ø—Ä–æ–±–µ–ª–æ–º', reply_markup=a_cancel_1)


@dp.message_handler(IsPrivate(), user_id=admins, content_types=['text'], state=[
    'editing_name', 'editing_preparing_for', 'editing_achievements', 'editing_curr_1', 'editing_curr_2',
    'deleting_in_timetable', 'adding_in_timetable', 'deleting_user'
])
async def correction_db(message: types.Message, state: FSMContext):
    text = message.text
    if text in ('–ù–∞–∑–∞–¥', '–û—Ç–º–µ–Ω–∞'):
        await state.set_state('selection_for_editing_in_the_UsersInfo')
        await message.answer(text, reply_markup=a_edit_users_db)
        return

    state_name = await state.get_state()
    data = await state.get_data()
    user_id = data['student_id']
    name = data['student_name']

    transfer_1 = {'–ø–Ω': 0, '–≤—Ç': 1, '—Å—Ä': 2, '—á—Ç': 3, '–ø—Ç': 4, '—Å–±': 5, '–≤—Å': 6, '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, '–≤—Ç–æ—Ä–Ω–∏–∫': 1,
                  '—Å—Ä–µ–¥–∞': 2, '—á–µ—Ç–≤–µ—Ä–≥': 3, '–ø—è—Ç–Ω–∏—Ü–∞': 4, '—Å—É–±–±–æ—Ç–∞': 5, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6}
    transfer_2 = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    transfer_3 = {'–ø–Ω': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç': '–í—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä': '–°—Ä–µ–¥–∞', '—á—Ç': '–ß–µ—Ç–≤–µ—Ä–≥',
                  '–ø—Ç': '–ü—è—Ç–Ω–∏—Ü–∞', '—Å–±': '–°—É–±–±–æ—Ç–∞', '–≤—Å': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}

    if state_name == 'editing_name':
        try:
            new_name = text
            if new_name == '':
                raise ValueError
            users_db.update_data(user_id=user_id, change=('name', new_name))
            await state.set_state('selection_for_editing_in_the_UsersInfo')
            await state.update_data(student_name=new_name)
            await message.answer(f'–ü–æ–ª–Ω–æ–µ –∏–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n–ù–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_name}',
                                 reply_markup=a_edit_users_db)
        except ValueError:
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')

    elif state_name == 'editing_curr_1':
        await message.answer('–ö–∞–∫–∞—è –≤–∞–ª—é—Ç–∞? –≠—Ç–∞ —Ñ–∏—à–∫–∞ –µ—â—ë –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')

    elif state_name == 'editing_curr_2':
        await message.answer('–ö–∞–∫–∞—è –≤–∞–ª—é—Ç–∞? –≠—Ç–∞ —Ñ–∏—à–∫–∞ –µ—â—ë –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')

    elif state_name == 'editing_preparing_for':
        preparation_for = message.text
        users_db.update_data(user_id=user_id, change=('preparation_for', preparation_for))
        await state.set_state('selection_for_editing_in_the_UsersInfo')
        await message.answer(
            f'–°—Ç–∞—Ç—É—Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —É—á–µ–Ω–∏–∫–∞ {name} –∏–∑–º–µ–Ω—ë–Ω!\n–¢–µ–ø–µ—Ä—å –æ–Ω –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫: ¬´{preparation_for}¬ª',
            reply_markup=a_edit_users_db)

    elif state_name == 'editing_achievements':
        line = users_db.select_user(user_id=user_id)
        achievements = json.loads(line[5])
        if text in achievements:
            achievements[text] += 1
        else:
            achievements[text] = 1
        users_db.update_data(user_id=user_id, change=('achievements', json.dumps(achievements)))
        await state.set_state('selection_for_editing_in_the_UsersInfo')
        await message.answer(f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ¬´{text}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {name}', reply_markup=a_edit_users_db)
        # TODO –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫

    elif state_name == 'deleting_in_timetable':
        line = users_db.select_user(user_id=user_id)
        timetable = json.loads(line[2])
        for day in text.split(', ') if ', ' in text else text.split():
            try:
                if str(transfer_1[day.lower()]) in timetable:
                    del timetable[str(transfer_1[day.lower()])]
            except KeyError as err:
                await message.answer(f'–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ {err}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
                return

        msg = [f'–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}:']
        for number, time in timetable.items():
            msg.append(f'    {transfer_2[int(number)]} - {time}')
        if not timetable:
            msg.append('~ ~ ~ –ü—É—Å—Ç–æ ~ ~ ~')

        users_db.update_data(user_id=user_id, change=('timetable', json.dumps(timetable)))
        await state.set_state('selection_for_editing_in_the_UsersInfo')
        await message.answer('\n'.join(msg), reply_markup=a_edit_users_db)

    elif state_name == 'adding_in_timetable':
        # TODO –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
        try:
            line = users_db.select_user(user_id=user_id)
            timetable = json.loads(line[2])
            for new in text.split(', '):
                day, time = new.split()
                if day.lower() in transfer_1:
                    if str(transfer_1[day.lower()]) in timetable:
                        del timetable[str(transfer_1[day.lower()])]
                    timetable[transfer_1[day.lower()]] = time
                else:
                    raise ValueError    # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –¥–µ–Ω—å
        except ValueError:
            await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –¥–µ–Ω—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            return

        msg = [f'–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}:']
        for number, time in timetable.items():
            msg.append(f'    {transfer_2[int(number)]} - {time}')
        if not timetable:
            msg.append('~ ~ ~ –ü—É—Å—Ç–æ ~ ~ ~')

        users_db.update_data(user_id=user_id, change=('timetable', json.dumps(timetable)))
        await state.set_state('selection_for_editing_in_the_UsersInfo')
        await message.answer('\n'.join(msg), reply_markup=a_edit_users_db)

    elif state_name == 'deleting_user':
        pass


@dp.message_handler(IsPrivate(), user_id=admins, state='selection_for_editing_in_the_VariantsInfo', text=[
    '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û—Ç–≤–µ—Ç—ã', '–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è', '–ò—Å—Ç–æ—á–Ω–∏–∫', '–°—Ç–∞—Ç—É—Å', '–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç', '–ú–µ–Ω—é üìí'
])
async def correction_db(message: types.Message, state: FSMContext):
    text = message.text
    if text == '–ú–µ–Ω—é üìí':
        await state.finish()
        await message.answer(text, reply_markup=a_menu)
        return

    data = await state.get_data()
    line = data['variant_line']

    if text == '–ù–∞–∑–≤–∞–Ω–∏–µ':
        await state.set_state('editing_title')
        await message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞', reply_markup=a_cancel_1)

    elif text == '–û—Ç–≤–µ—Ç—ã':
        await state.set_state('editing_answers')
        gen = (f'{number}) {answer}\n' for number, answer in json.loads(line[2]).items())
        msg = ''.join(gen) + '\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n1) 123\n2) wzyx\n. . .\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª'
        await message.answer(msg, reply_markup=a_cancel_1)

    elif text == '–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è':
        await state.set_state('delete_or_add_additional')
        await message.answer('–£–¥–∞–ª–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ?', reply_markup=a_edit_timetable_or_achievements)

    elif text == '–°—Ç–∞—Ç—É—Å':
        await state.set_state('change_or_delete_status')
        await message.answer('–£–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å?', reply_markup=a_delete_or_change)

    elif text == '–ò—Å—Ç–æ—á–Ω–∏–∫':
        await state.set_state('change_or_delete_source')
        await message.answer('–£–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫?', reply_markup=a_delete_or_change)

    elif text == '–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç':
        await state.set_state('delete_variant_yes_or_not')
        await message.answer(
            f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å "{line[1]}"?', reply_markup=a_yes_or_not)


@dp.message_handler(IsPrivate(), user_id=admins, content_types=['text'], state='change_or_delete_status')
async def correction_db(message: types.Message, state: FSMContext):
    text = message.text
    if text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer('–û—Ç–º–µ–Ω–∞', reply_markup=a_edit_variants_db)
        return

    if text == '–£–¥–∞–ª–∏—Ç—å':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer('–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω', reply_markup=a_edit_variants_db)
        data = await state.get_data()
        line = data['variant_line']
        variants_db.update_data(_variant_id=line[0], _title=line[1], status=None)

    elif text == '–ò–∑–º–µ–Ω–∏—Ç—å':
        await state.set_state('editing_satus')
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞', reply_markup=a_cancel_1)


@dp.message_handler(IsPrivate(), user_id=admins, content_types=['text'], state='change_or_delete_source')
async def correction_db(message: types.Message, state: FSMContext):
    text = message.text
    if text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer('–û—Ç–º–µ–Ω–∞', reply_markup=a_edit_variants_db)
        return

    if text == '–£–¥–∞–ª–∏—Ç—å':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer('–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω', reply_markup=a_edit_variants_db)
        data = await state.get_data()
        line = data['variant_line']
        variants_db.update_data(_variant_id=line[0], _title=line[1], source=None)

    elif text == '–ò–∑–º–µ–Ω–∏—Ç—å':
        await state.set_state('editing_source')
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞', reply_markup=a_cancel_1)


@dp.message_handler(IsPrivate(), user_id=admins, content_types=['text'], state='delete_variant_yes_or_not')
async def correction_db(message: types.Message, state: FSMContext):
    if message.text == '–î–∞':
        data = await state.get_data()
        line = data['variant_line']
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer(f'–í–∞—Ä–∏–∞–Ω—Ç {line[1]} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', reply_markup=a_edit_variants_db)
        variants_db.delete_variant(variant_id=line[0], title=line[1])

    elif message.text == '–ù–µ—Ç':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer('–•–æ—Ä–æ—à–æ, –Ω–µ —É–¥–∞–ª—è—é', reply_markup=a_edit_variants_db)


@dp.message_handler(IsPrivate(), user_id=admins, content_types=['text'], state='delete_or_add_additional')
async def correction_db(message: types.Message, state: FSMContext):
    text = message.text
    if text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer(text, reply_markup=a_edit_variants_db)
        return

    if text == '–£–¥–∞–ª–∏—Ç—å':
        await state.set_state('deleting_additional')
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–æ–Ω–æ —É–¥–∞–ª–∏—Ç—Å—è –≤—Å–µ–≥–æ 1 —Ä–∞–∑)',
                             reply_markup=a_cancel_1)

    elif text == '–î–æ–±–∞–≤–∏—Ç—å':
        await state.set_state('adding_additional')
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å (–æ–Ω–æ –¥–æ–±–∞–≤–∏—Ç—Å—è 1 —Ä–∞–∑)',
                             reply_markup=a_cancel_1)


@dp.message_handler(IsPrivate(), user_id=admins, content_types=['text'], state=[
    'editing_title', 'editing_source', 'editing_satus', 'deleting_additional', 'adding_additional', 'editing_answers'
])
async def correction_db(message: types.Message, state: FSMContext):
    text = message.text
    if text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer('–û—Ç–º–µ–Ω–∞', reply_markup=a_edit_variants_db)
        return

    data = await state.get_data()
    line = list(data['variant_line'])
    state_name = await state.get_state()

    if state_name == 'editing_title':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        line[1] = text
        await message.answer(f'–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {text}', reply_markup=a_edit_variants_db)
        variants_db.update_data(_variant_id=line[0], _title=line[1], title=text)

    elif state_name == 'editing_source':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        line[5] = text
        await message.answer(f'–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞ "{line[1]}" –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {text}', reply_markup=a_edit_variants_db)
        variants_db.update_data(_variant_id=line[0], _title=line[1], source=text)

    elif state_name == 'editing_satus':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        line[4] = text
        await message.answer(f'–°—Ç–∞—Ç—É—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞ "{line[1]}" –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {text}', reply_markup=a_edit_variants_db)
        variants_db.update_data(_variant_id=line[0], _title=line[1], status=text)

    elif state_name == 'deleting_additional':
        additional = json.loads(line[6])
        try:
            additional[text] -= 1
            t = additional[text]
            if additional[text] == 0:
                del additional[text]
            variants_db.update_data(_variant_id=line[0], _title=line[1], additional=json.dumps(additional))
            await state.set_state('selection_for_editing_in_the_VariantsInfo')
            line[6] = json.dumps(additional)
            await state.update_data(variant_line=line)
            await message.answer(
                f'–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {text} —É–¥–∞–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å —É –≤–∞—Ä–∏–∞–Ω—Ç–∞ "{line[1]}" –∏—Ö: {t}', reply_markup=a_edit_variants_db)
        except KeyError:
            await message.answer(f'–£ –≤–∞—Ä–∏–∞–Ω—Ç–∞ "{line[1]}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è {text}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')

    elif state_name == 'adding_additional':
        print(line[6], type(line[6]))
        additional = json.loads(line[6])
        try:
            additional[text] += 1
            t = additional[text]
        except KeyError:
            additional[text] = 1
            t = 1
        line[6] = json.dumps(additional)
        variants_db.update_data(_variant_id=line[0], _title=line[1], additional=json.dumps(additional))
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer(
            f'–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ "{text}" –¥–æ–±–∞–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å —É –≤–∞—Ä–∏–∞–Ω—Ç–∞ "{line[1]}" –∏—Ö: {t}', reply_markup=a_edit_variants_db)

    elif state_name == 'editing_answers':
        answers = dict()  # number: answer (str: str)
        try:
            for _line in message.text.split('\n'):
                _line = _line.strip()
                if ') ' in _line:
                    number, answer = _line.split(') ')
                    answers[number] = answer
                else:
                    number, answer = _line.split()
                    answers[number] = answer
        except ValueError:
            await message.answer(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            return

        line[2] = json.dumps(answers)
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer(f'–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç "{line[1]}" –∏–∑–º–µ–Ω–µ–Ω—ã', reply_markup=a_edit_variants_db)
        variants_db.update_data(_variant_id=line[0], _title=line[1], answers=json.dumps(answers))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ
    await state.update_data(variant_line=line)


@dp.message_handler(IsPrivate(), user_id=admins, text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã')
async def correction_db(message: types.Message, state: FSMContext):
    await state.set_state('what_to_check_from_homework')
    await message.answer('–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å?', reply_markup=a_what_to_check)


@dp.message_handler(IsPrivate(), user_id=admins, state='what_to_check_from_homework', text=[
    '–í–∞—Ä–∏–∞–Ω—Ç—ã  –ï–ì–≠', '–í–∞—Ä–∏–∞–Ω—Ç—ã –û–ì–≠', '–¢–µ—Å—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–î—Ä—É–≥–æ–µ', '–ú–µ–Ω—é üìí'])
async def correction_db(message: types.Message, state: FSMContext):    # TODO –¥–æ–¥–µ–ª–∞—Ç—å
    text = message.text
    if text == '–ú–µ–Ω—é üìí':
        await state.finish()
        await message.answer(text, reply_markup=a_menu)
        return

    elif text == '–í–∞—Ä–∏–∞–Ω—Ç—ã  –ï–ì–≠':
        new_state, new_layout = 'how_to_check_ege', a_check_oge
    elif text == '–í–∞—Ä–∏–∞–Ω—Ç—ã –û–ì–≠':
        new_state, new_layout = 'how_to_check_oge', a_check_oge
    elif text == '–¢–µ—Å—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã':
        new_state, new_layout = 'how_to_check_common_variant', a_check_oge
    elif text == '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ':
        new_state, new_layout = 'how_to_check_programs', a_check_oge
    elif text == '–î—Ä—É–≥–æ–µ':
        new_state, new_layout = 'how_to_check_other', a_check_oge

    await state.set_state(new_state)
    await message.answer('–ö–∞–∫ –∏–º–µ–Ω–Ω–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É?', reply_markup=new_layout)


@dp.message_handler(IsPrivate(), user_id=admins, text=[
    '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–±–æ—Ä–æ—á–Ω–æ', '–û—Ç–º–µ–Ω–∞'], state=[
    'how_to_check_ege', 'how_to_check_oge', 'how_to_check_common_variant', 'how_to_check_programs', 'how_to_check_other'])
@dp.message_handler(IsPrivate(), user_id=admins, text=[
    '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–µ–Ω–∏–∫–∞', '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É'], state='next_check_or_stop')
async def correction_db(message: types.Message, state: FSMContext):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ë–î, –ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ requests –∏ –∏—â–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è –Ω–∞ 'oge_'
    text = message.text

    if text in ('–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É', '–û—Ç–º–µ–Ω–∞'):
        await state.finish()
        await message.answer(text, reply_markup=a_menu)
        return

    state_name = await state.get_state()
    if text in ('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–µ–Ω–∏–∫–∞'):
        data_of_all_users = users_db.select_all_users()
        admin_id = message.from_user.id
        for line in data_of_all_users:
            name = line[1]
            requests = json.loads(line[9])
            for key in requests:
                if key.startswith('oge_') and state_name == 'how_to_check_oge':
                    await state.update_data(checking_student_id=line[0])
                    await state.update_data(checking_student_name=name)

                    variant_info = requests[key]
                    photo_ids = variant_info['photo_ids'] if 'photo_ids' in variant_info else dict()
                    file_ids = variant_info['file_ids'] if 'file_ids' in variant_info else dict()
                    tasks_solved = variant_info['tasks_solved']
                    correct_answers = variant_info['correct_answers']
                    results = variant_info['results']
                    primary_points = variant_info['primary_points']
                    max_primary_points = MAX_PRIMARY_POINTS_FOR_OGE
                    secondary_points = OGE_TRANSFER[primary_points]
                    await message.answer(
                        '\n'.join(
                    f'{_number}) {_answer} - {"‚úÖ" if _result else "‚ùå"}' for _number, _answer, _result in results)
                + f'\n\n{name} —Ä–µ—à–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ {tasks_solved} –∏–∑ {len(correct_answers)} –∑–∞–¥–∞—á!\n\n'
                  f'–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: {primary_points} –∏–∑ {max_primary_points},'
                  f' —á—Ç–æ —Ä–∞–≤–Ω–æ {round(primary_points / max_primary_points * 100, 1)}%\n\n'
                  f'–û—Ü–µ–Ω–∫–∞: {secondary_points}', reply_markup=a_check_continue)

                    if file_ids or photo_ids:
                        for file_id in file_ids:
                            await bot.send_document(admin_id, file_id)

                        for photo_id in photo_ids:
                            await bot.send_photo(admin_id, photo_id)

                        await state.set_state('NOT_SINGLE_how_many_points_were_received')
                        await message.answer(
                            f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –±–∞–ª–ª—ã —É—á–µ–Ω–∏–∫–∞ {name} –∑–∞ –∑–∞–¥–∞—á–∏ 13-15 –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n13 2\n14 3\n15 0',
                            reply_markup=a_cancel_1)
                    else:
                        await state.set_state('next_check_or_stop')
                        await message.answer('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ?', reply_markup=a_check_continue)

                    del requests[key]
                    users_db.update_data(user_id=line[0], change=('requests', json.dumps(requests)))
                    return

                elif key.startswith('prog_') and state_name == 'how_to_check_programs':
                    await state.update_data(checking_student_id=line[0])
                    await state.update_data(checking_student_name=name)
                    await state.set_state('how_many_programs_have_been_solved')

                    variant_info = requests[key]
                    photo_ids = variant_info['photo_ids'],
                    file_ids = variant_info['file_ids'],

                    file_ids = file_ids[0] if len(
                        file_ids) != 0 else dict()  # TODO —Å—Ç—Ä–∞–Ω–Ω–∞—è –Ω–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ú–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                    photo_ids = photo_ids[0] if len(photo_ids) != 0 else dict()

                    for file_id in file_ids:
                        await bot.send_document(admin_id, file_id)

                    for photo_id in photo_ids:
                        await bot.send_photo(admin_id, photo_id)

                    await message.answer(
                        f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —É —É—á–µ–Ω–∏–∫–∞ {name} –≤ —Ñ–æ—Ä–º–∞—Ç–µ:'
                        f'\n4/5\n(—á—Ç–æ –∑–Ω–∞—á–∏—Ç 4 –∏–∑ 5 –∑–∞–¥–∞—á —Ä–µ—à–µ–Ω–æ)\n', reply_markup=a_cancel_1)
                    return

                elif key.startswith('ege_') and state_name == 'how_to_check_ege':
                    await state.update_data(checking_student_id=line[0])
                    await state.update_data(checking_student_name=name)
                    await state.set_state('next_check_or_stop')

                    variant_info = requests[key]
                    photo_ids = variant_info['photo_ids'] if 'photo_ids' in variant_info else dict(),
                    file_ids = variant_info['file_ids'] if 'file_ids' in variant_info else dict(),
                    tasks_solved = variant_info['tasks_solved'],
                    correct_answers = variant_info['correct_answers'],
                    results = variant_info['results'],
                    primary_points = variant_info['primary_points']
                    max_primary_points = sum(EGE_POINTS_FOR_NUMBERS.values())
                    secondary_points = EGE_TRANSFER[primary_points]

                    await message.answer(
                        '\n'.join(
                            f'{_number}) {_answer} - {"‚úÖ" if _result else "‚ùå"}' for _number, _answer, _result in
                            results[0])
                        + f'\n\n{name} —Ä–µ—à–∏–ª(–∞) –ø—Ä–∞–≤–∏–ª—å–Ω–æ {tasks_solved[0]} –∏–∑ {len(correct_answers[0])} –∑–∞–¥–∞—á!\n\n'
                          f'–ù–∞–±—Ä–∞–Ω–æ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –±–∞–ª–ª–æ–≤: {primary_points} –∏–∑ {max_primary_points},'
                          f' —á—Ç–æ —Ä–∞–≤–Ω–æ {round(primary_points / max_primary_points * 100, 1)}%\n\n'
                          f'–í–æ –≤—Ç–æ—Ä–∏—á–Ω—ã—Ö –±–∞–ª–ª–∞—Ö —ç—Ç–æ {secondary_points} –∏–∑ 100!', reply_markup=a_check_continue)

                    file_ids = file_ids[0] if len(
                        file_ids) != 0 else dict()  # TODO —Å—Ç—Ä–∞–Ω–Ω–∞—è –Ω–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ú–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                    photo_ids = photo_ids[0] if len(photo_ids) != 0 else dict()
                    for file_id in file_ids:
                        await bot.send_document(admin_id, file_id)

                    for photo_id in photo_ids:
                        await bot.send_photo(admin_id, photo_id)

                    # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    del requests[key]
                    users_db.update_data(user_id=int(line[0]), change=('requests', json.dumps(requests)))
                    return

                elif key.startswith('test_') and state_name == 'how_to_check_common_variant':
                    return

                elif key.startswith('other_') and state_name == 'how_to_check_other':
                    return

        else:
            await state.finish()
            await message.answer('–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!', reply_markup=a_menu)

    elif text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–±–æ—Ä–æ—á–Ω–æ':
        if state_name == 'how_to_check_oge':
            await state.set_state('enter_id_to_check_oge')
        elif state_name == 'how_to_check_programs':
            await state.set_state('enter_id_to_check_programs')
        elif state_name == 'how_to_check_ege':
            await state.set_state('enter_id_to_check_ege')
        elif state_name == 'how_to_check_common_variant':
            await state.set_state('enter_id_to_check_common_variant')
        elif state_name == 'how_to_check_other':
            await state.set_state('enter_id_to_check_other')

        await message.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç', reply_markup=a_cancel_1)


@dp.message_handler(IsPrivate(), user_id=admins, state=[
    'how_many_programs_have_been_solved', 'single_how_many_programs_have_been_solved'])
async def correction_db(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state('what_to_check_from_homework')
        await message.answer(message.text, reply_markup=a_what_to_check)
        return

    data = await state.get_data()
    state_name = await state.get_state()
    try:
        correct_programs, count_of_programs = map(int, message.text.replace(' ', '').split('/'))
        await bot.send_message(
            data['checking_student_id'],
            f'{data["checking_student_name"]}, —É—á–∏—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä–∏–ª –í–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –∑–∞—á—ë–ª '
            f'{correct_programs} –∏–∑ {count_of_programs} –∑–∞–¥–∞—á')
        if state_name == 'how_many_programs_have_been_solved':
            await state.set_state('next_check_or_stop')
        elif state_name == 'single_how_many_programs_have_been_solved':
            await state.finish()
        await message.answer(
            f'–£—á–µ–Ω–∏–∫ {data["checking_student_name"]} –ø—Ä–æ–≤–µ—Ä–µ–Ω. –†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: {correct_programs} –∏–∑ {count_of_programs}',
            reply_markup=a_check_continue if state_name == 'how_many_programs_have_been_solved' else a_menu)
        line = users_db.select_user(user_id=int(data['checking_student_id']))
        requests = json.loads(line[9])
        for key in requests:
            if key.startswith('prog_'):
                key_to_delete = key
        del requests[key_to_delete]
        users_db.update_data(user_id=int(data['checking_student_id']), change=('requests', json.dumps(requests)))
    except:  # TODO –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
        await message.answer(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')


@dp.message_handler(IsPrivate(), user_id=admins, content_types=['text'], state='enter_id_to_check_oge')
async def correction_db(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ–≥–æ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –û–ì–≠"""
    text = message.text

    if text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer(text, reply_markup=a_menu)
        return

    try:
        line = users_db.select_user(user_id=int(text))
        name = line[1]
        requests = json.loads(line[9])
        assert any(key.startswith('oge_') for key in requests)
    except AssertionError:
        await message.answer(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} –Ω–µ—Ç –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –û–ì–≠')
        return
    except TypeError:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        return

    for key in requests:
        if key.startswith('oge_'):
            await state.update_data(checking_student_id=line[0])
            await state.set_state('SINGLE_how_many_points_were_received')
            admin_id = message.from_user.id

            variant_info = requests[key]
            photo_ids = variant_info['photo_ids'],
            file_ids = variant_info['file_ids'],
            tasks_solved = variant_info['tasks_solved'],
            correct_answers = variant_info['correct_answers'],
            results = variant_info['results'],
            primary_points = variant_info['primary_points']
            max_primary_points = MAX_PRIMARY_POINTS_FOR_OGE
            secondary_points = OGE_TRANSFER[primary_points]

            await message.answer(
                '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:' +
                '\n'.join(
                    f'{_number}) {_answer} - {"‚úÖ" if _result else "‚ùå"}' for _number, _answer, _result in results[0])
                + f'\n\n{name} —Ä–µ—à–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ {tasks_solved[0]} –∏–∑ {len(correct_answers[0])} –∑–∞–¥–∞—á!\n\n'
                  f'–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: {primary_points} –∏–∑ {max_primary_points},'
                  f' —á—Ç–æ —Ä–∞–≤–Ω–æ {round(primary_points / max_primary_points * 100, 1)}%\n\n'
                  f'–û—Ü–µ–Ω–∫–∞: {secondary_points}', reply_markup=a_check_continue
            )

            file_ids = file_ids[0] if len(file_ids) != 0 else dict()  # TODO —Å—Ç—Ä–∞–Ω–Ω–∞—è –Ω–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ú–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
            photo_ids = photo_ids[0] if len(photo_ids) != 0 else dict()
            for file_id in file_ids:
                if file_id:
                    await bot.send_document(admin_id, file_id)

            for photo_id in photo_ids:
                if photo_id:
                    await bot.send_photo(admin_id, photo_id)

            await message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –±–∞–ª–ª—ã —É—á–µ–Ω–∏–∫–∞ {name} –∑–∞ –∑–∞–¥–∞—á–∏ 13-15 –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n13 2\n14 3\n15 0',
                                 reply_markup=a_cancel_1)
            return


@dp.message_handler(IsPrivate(), user_id=admins, content_types=['text'], state='enter_id_to_check_programs')
async def correction_db(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ–≥–æ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é"""
    text = message.text
    if text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer(text, reply_markup=a_menu)
        return

    try:
        line = users_db.select_user(user_id=int(text))
        name = line[1]
        requests = json.loads(line[9])
        assert any(key.startswith('prog_') for key in requests)
    except AssertionError:
        await message.answer(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} –Ω–µ—Ç –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é')
        return
    except TypeError:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        return

    for key in requests:
        if key.startswith('prog_'):
            await state.update_data(checking_student_id=line[0], checking_student_name=name)
            await state.set_state('how_many_programs_have_been_solved')
            admin_id = message.from_user.id

            variant_info = requests[key]
            photo_ids = variant_info['photo_ids'] if 'photo_ids' in variant_info else dict()
            file_ids = variant_info['file_ids'] if 'file_ids' in variant_info else dict()

            for file_id in file_ids:
                if file_id:
                    await bot.send_document(admin_id, file_id)

            for photo_id in photo_ids:
                if photo_id:
                    await bot.send_photo(admin_id, photo_id)

            await message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —É—á–µ–Ω–∏–∫–∞ {name} –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n3/4\n(—á—Ç–æ'
                                 f' –æ–∑–Ω–∞—á–∞–µ—Ç, —Ä–µ—à–µ–Ω–æ 3 –∏–∑ 4 –∑–∞–¥–∞—á)', reply_markup=a_cancel_1)
            return


@dp.message_handler(IsPrivate(), user_id=admins, content_types=['text'], state='enter_id_to_check_ege')
async def correction_db(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ï–ì–≠"""
    text = message.text
    if text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer(text, reply_markup=a_menu)
        return

    try:
        line = users_db.select_user(user_id=int(text))
        name = line[1]
        requests = json.loads(line[9])
        assert any(key.startswith('ege_') for key in requests)
    except AssertionError:
        await message.answer(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} –Ω–µ—Ç –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –ï–ì–≠')
        return
    except TypeError:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        return

    for key in requests:
        if key.startswith('ege_'):
            await state.finish()
            admin_id = message.from_user.id

            variant_info = requests[key]
            photo_ids = variant_info['photo_ids'] if 'photo_ids' in variant_info else dict()
            file_ids = variant_info['file_ids'] if 'file_ids' in variant_info else dict()
            tasks_solved = variant_info['tasks_solved'],
            correct_answers = variant_info['correct_answers'],
            results = variant_info['results'],
            primary_points = variant_info['primary_points']
            max_primary_points = sum(EGE_POINTS_FOR_NUMBERS.values())
            secondary_points = EGE_TRANSFER[primary_points]

            await message.answer(
                '\n'.join(
                    f'{_number}) {_answer} - {"‚úÖ" if _result else "‚ùå"}' for _number, _answer, _result in
                    results[0])
                + f'\n\n{name} —Ä–µ—à–∏–ª(–∞) –ø—Ä–∞–≤–∏–ª—å–Ω–æ {tasks_solved[0]} –∏–∑ {len(correct_answers[0])} –∑–∞–¥–∞—á!\n\n'
                  f'–ù–∞–±—Ä–∞–Ω–æ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –±–∞–ª–ª–æ–≤: {primary_points} –∏–∑ {max_primary_points},'
                  f' —á—Ç–æ —Ä–∞–≤–Ω–æ {round(primary_points / max_primary_points * 100, 1)}%\n\n'
                  f'–í–æ –≤—Ç–æ—Ä–∏—á–Ω—ã—Ö –±–∞–ª–ª–∞—Ö —ç—Ç–æ {secondary_points} –∏–∑ 100!', reply_markup=a_menu)

            file_ids = file_ids[0] if len(file_ids) != 0 else dict()  # TODO —Å—Ç—Ä–∞–Ω–Ω–∞—è –Ω–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ú–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
            photo_ids = photo_ids[0] if len(photo_ids) != 0 else dict()
            for file_id in file_ids:
                if file_id:
                    await bot.send_document(admin_id, file_id)

            for photo_id in photo_ids:
                if photo_id:
                    await bot.send_photo(admin_id, photo_id)

            return
