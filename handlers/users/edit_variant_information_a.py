import json
from aiogram import types
from aiogram.dispatcher import FSMContext

from filters import IsPrivate
from keyboards.default import a_menu, a_cancel_1, a_edit_timetable_or_achievements, a_delete_or_change, a_yes_or_not, \
    a_edit_variants_db
from loader import dp, variants_db
from data.config import admins


@dp.message_handler(IsPrivate(), user_id=admins, state='selection_for_editing_in_the_VariantsInfo', text=[
    '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û—Ç–≤–µ—Ç—ã', '–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è', '–ò—Å—Ç–æ—á–Ω–∏–∫', '–°—Ç–∞—Ç—É—Å', '–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç', '–ú–µ–Ω—é üìí'
])
async def correction_db(message: types.Message, state: FSMContext):
    text = message.text
    if text == '–ú–µ–Ω—é üìí':
        await state.finish()
        await message.answer(text, reply_markup=a_menu)
        return

    data = await state.get_data()
    line = data['variant_line']

    if text == '–ù–∞–∑–≤–∞–Ω–∏–µ':
        await state.set_state('editing_title')
        await message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞', reply_markup=a_cancel_1)

    elif text == '–û—Ç–≤–µ—Ç—ã':
        await state.set_state('editing_answers')
        gen = (f'{number}) {answer}\n' for number, answer in json.loads(line[2]).items())
        msg = ''.join(gen) + '\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n1) 123\n2) wzyx\n. . .\n–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª'
        await message.answer(msg, reply_markup=a_cancel_1)

    elif text == '–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è':
        await state.set_state('delete_or_add_additional')
        await message.answer('–£–¥–∞–ª–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ?', reply_markup=a_edit_timetable_or_achievements)

    elif text == '–°—Ç–∞—Ç—É—Å':
        await state.set_state('change_or_delete_status')
        await message.answer('–£–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å?', reply_markup=a_delete_or_change)

    elif text == '–ò—Å—Ç–æ—á–Ω–∏–∫':
        await state.set_state('change_or_delete_source')
        await message.answer('–£–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫?', reply_markup=a_delete_or_change)

    elif text == '–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç':
        await state.set_state('delete_variant_yes_or_not')
        await message.answer(
            f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å "{line[1]}"?', reply_markup=a_yes_or_not)


@dp.message_handler(IsPrivate(), user_id=admins, content_types=['text'], state='change_or_delete_status')
async def correction_db(message: types.Message, state: FSMContext):
    text = message.text
    if text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer('–û—Ç–º–µ–Ω–∞', reply_markup=a_edit_variants_db)
        return

    if text == '–£–¥–∞–ª–∏—Ç—å':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer('–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω', reply_markup=a_edit_variants_db)
        data = await state.get_data()
        line = data['variant_line']
        variants_db.update_data(_variant_id=line[0], _title=line[1], status=None)

    elif text == '–ò–∑–º–µ–Ω–∏—Ç—å':
        await state.set_state('editing_satus')
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞', reply_markup=a_cancel_1)


@dp.message_handler(IsPrivate(), user_id=admins, content_types=['text'], state='change_or_delete_source')
async def correction_db(message: types.Message, state: FSMContext):
    text = message.text
    if text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer('–û—Ç–º–µ–Ω–∞', reply_markup=a_edit_variants_db)
        return

    if text == '–£–¥–∞–ª–∏—Ç—å':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer('–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω', reply_markup=a_edit_variants_db)
        data = await state.get_data()
        line = data['variant_line']
        variants_db.update_data(_variant_id=line[0], _title=line[1], source=None)

    elif text == '–ò–∑–º–µ–Ω–∏—Ç—å':
        await state.set_state('editing_source')
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞', reply_markup=a_cancel_1)


@dp.message_handler(IsPrivate(), user_id=admins, content_types=['text'], state='delete_variant_yes_or_not')
async def correction_db(message: types.Message, state: FSMContext):
    if message.text == '–î–∞':
        data = await state.get_data()
        line = data['variant_line']
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer(f'–í–∞—Ä–∏–∞–Ω—Ç {line[1]} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', reply_markup=a_edit_variants_db)
        variants_db.delete_variant(variant_id=line[0], title=line[1])

    elif message.text == '–ù–µ—Ç':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer('–•–æ—Ä–æ—à–æ, –Ω–µ —É–¥–∞–ª—è—é', reply_markup=a_edit_variants_db)


@dp.message_handler(IsPrivate(), user_id=admins, content_types=['text'], state='delete_or_add_additional')
async def correction_db(message: types.Message, state: FSMContext):
    text = message.text
    if text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer(text, reply_markup=a_edit_variants_db)
        return

    if text == '–£–¥–∞–ª–∏—Ç—å':
        await state.set_state('deleting_additional')
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–æ–Ω–æ —É–¥–∞–ª–∏—Ç—Å—è –≤—Å–µ–≥–æ 1 —Ä–∞–∑)',
                             reply_markup=a_cancel_1)

    elif text == '–î–æ–±–∞–≤–∏—Ç—å':
        await state.set_state('adding_additional')
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å (–æ–Ω–æ –¥–æ–±–∞–≤–∏—Ç—Å—è 1 —Ä–∞–∑)',
                             reply_markup=a_cancel_1)


@dp.message_handler(IsPrivate(), user_id=admins, content_types=['text'], state=[
    'editing_title', 'editing_source', 'editing_satus', 'deleting_additional', 'adding_additional', 'editing_answers'
])
async def correction_db(message: types.Message, state: FSMContext):
    text = message.text
    if text == '–û—Ç–º–µ–Ω–∞':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer('–û—Ç–º–µ–Ω–∞', reply_markup=a_edit_variants_db)
        return

    data = await state.get_data()
    line = list(data['variant_line'])
    state_name = await state.get_state()

    if state_name == 'editing_title':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        line[1] = text
        await message.answer(f'–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {text}', reply_markup=a_edit_variants_db)
        variants_db.update_data(_variant_id=line[0], _title=line[1], title=text)

    elif state_name == 'editing_source':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        line[5] = text
        await message.answer(f'–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞ "{line[1]}" –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {text}', reply_markup=a_edit_variants_db)
        variants_db.update_data(_variant_id=line[0], _title=line[1], source=text)

    elif state_name == 'editing_satus':
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        line[4] = text
        await message.answer(f'–°—Ç–∞—Ç—É—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞ "{line[1]}" –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {text}', reply_markup=a_edit_variants_db)
        variants_db.update_data(_variant_id=line[0], _title=line[1], status=text)

    elif state_name == 'deleting_additional':
        additional = json.loads(line[6])
        try:
            additional[text] -= 1
            t = additional[text]
            if additional[text] == 0:
                del additional[text]
            variants_db.update_data(_variant_id=line[0], _title=line[1], additional=json.dumps(additional))
            await state.set_state('selection_for_editing_in_the_VariantsInfo')
            line[6] = json.dumps(additional)
            await state.update_data(variant_line=line)
            await message.answer(
                f'–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {text} —É–¥–∞–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å —É –≤–∞—Ä–∏–∞–Ω—Ç–∞ "{line[1]}" –∏—Ö: {t}', reply_markup=a_edit_variants_db)
        except KeyError:
            await message.answer(f'–£ –≤–∞—Ä–∏–∞–Ω—Ç–∞ "{line[1]}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è {text}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')

    elif state_name == 'adding_additional':
        print(line[6], type(line[6]))
        additional = json.loads(line[6])
        try:
            additional[text] += 1
            t = additional[text]
        except KeyError:
            additional[text] = 1
            t = 1
        line[6] = json.dumps(additional)
        variants_db.update_data(_variant_id=line[0], _title=line[1], additional=json.dumps(additional))
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer(
            f'–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ "{text}" –¥–æ–±–∞–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å —É –≤–∞—Ä–∏–∞–Ω—Ç–∞ "{line[1]}" –∏—Ö: {t}', reply_markup=a_edit_variants_db)

    elif state_name == 'editing_answers':
        answers = dict()  # number: answer (str: str)
        try:
            for _line in message.text.split('\n'):
                _line = _line.strip()
                if ') ' in _line:
                    number, answer = _line.split(') ')
                    answers[number] = answer
                else:
                    number, answer = _line.split()
                    answers[number] = answer
        except ValueError:
            await message.answer(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            return

        line[2] = json.dumps(answers)
        await state.set_state('selection_for_editing_in_the_VariantsInfo')
        await message.answer(f'–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç "{line[1]}" –∏–∑–º–µ–Ω–µ–Ω—ã', reply_markup=a_edit_variants_db)
        variants_db.update_data(_variant_id=line[0], _title=line[1], answers=json.dumps(answers))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ
    await state.update_data(variant_line=line)
